{"version":3,"sources":["../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_box-sizing.scss","_grid.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_outer-container.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/settings/_grid.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/mixins/_clearfix.scss","_global.scss","_colors.scss","_header.scss","_mixins.scss","_navigation.scss","_press-video.scss","_content.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_span-columns.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_private.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_shift.scss","_footer.scss","_github-buttons.scss"],"names":[],"mappings":"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","file":"main.css","sourcesContent":["@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    box-sizing: border-box;\n  }\n\n  * {\n    &,\n    &::after,\n    &::before {\n      box-sizing: inherit;\n    }\n  }\n}\n","// ===============================\n// Grid\n// ===============================\n.container {\n\t@include outer-container;\n    padding-left: 15px;\n    padding-right: 15px;\n}\n","@charset \"UTF-8\";\n\n/// Makes an element a outer container by centering it in the viewport, clearing its floats, and setting its `max-width`.\n/// Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.\n///\n/// @param {Number [unit]} $local-max-width [$max-width]\n///   Max width to be applied to the element. Can be a percentage or a measure.\n///\n/// @example scss - Usage\n///   .element {\n///     @include outer-container(100%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     max-width: 100%;\n///     margin-left: auto;\n///     margin-right: auto;\n///   }\n///\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Sets the relative width of a single grid column. The unit used should be the same one used to define `$gutter`. Set with a `!global` flag.\n///\n/// @type Number (Unit)\n\n$column: 4.2358em !default;\n\n/// Sets the relative width of a single grid gutter. The unit used should be the same one used to define `$column`. Set with the `!global` flag.\n///\n/// @type Number (Unit)\n\n$gutter: 1.618em !default;\n\n/// Sets the total number of columns in the grid. Its value can be overridden inside a media query using the `media()` mixin. Set with the `!global` flag.\n///\n/// @type Number (Unitless)\n\n$grid-columns: 12 !default;\n\n/// Sets the max-width property of the element that includes `outer-container()`. Set with the `!global` flag.\n///\n/// @type Number (Unit)\n///\n$max-width: 1200px !default;\n\n/// When set to true, it sets the box-sizing property of all elements to `border-box`. Set with a `!global` flag.\n///\n/// @type Bool\n///\n/// @example css - CSS Output\n///   html {\n///     box-sizing: border-box; }\n///\n///   *, *::after, *::before {\n///     box-sizing: inherit;\n///   }\n\n$border-box-sizing: true !default;\n\n/// Sets the default [media feature](http://www.w3.org/TR/css3-mediaqueries/#media) that `media()` and `new-breakpoint()` revert to when only a breakpoint value is passed. Set with a `!global` flag.\n///\n/// @type String\n\n$default-feature: min-width; // Default @media feature for the breakpoint() mixin\n\n///Sets the default layout direction of the grid. Can be `LTR` or `RTL`. Set with a `!global` flag.\n///\n///@type String\n\n$default-layout-direction: LTR !default;\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://goo.gl/yP5hiZ\n///\n/// @example scss\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: block;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: block;\n  }\n}\n","// ===============================\n// Body\n// ===============================\nbody {\n    font-family: 'Ubuntu Mono', monospace;\n    color: $color3;\n    margin: 0;\n    line-height: 1.25em;\n    height: 100%;\n    position: relative;\n    padding-bottom: 40px;\n    min-height: 100vh;\n\n    &.home {\n        position: static;\n        padding-bottom: 0;\n    } // &.home\n} // body\n\n// ===============================\n// Buttons\n// ===============================\n.btn {\n    border: 2px solid $color3;\n    padding: 10px 20px;\n    line-height: 1em;\n    white-space: nowrap;\n    color: $color3;\n    background-color: transparent;\n    text-align: center;\n    display: inline-block;\n    text-decoration: none;\n    border-radius: 20px;\n    transition: all 250ms ease-out;\n\n    &:hover,\n    &:active,\n    &:focus {\n        background-color: $color2;\n        color: $color3;\n    }\n\n    &.btn-inverse {\n        border-color: $color2;\n        color: $color2;\n\n        &:hover,\n        &:focus,\n        &:active {\n            color: $color3;\n        } // &:hover,&:focus,&:active\n    } // .btn-inverse\n}\n","$color1: #000;\n$color2: #fff;\n$color3: #49575E;\n$color4: #899ba6;\n$color5: #a8ce93;\n","// ===============================\n// Header\n// ===============================\n.site-header {\n    @include clearfix;\n    border-top: 5px solid $color5;\n    padding: 10px 0 0;\n    margin-bottom: 25px;\n\n    @include bp-desktop {\n        margin-bottom: 40px;\n    } // @include bp-desktop\n\n    .logo {\n        font-weight: bold;\n        font-size: 24px;\n        float: left;\n        display: block;\n        text-decoration: none;\n        color: $color3;\n\n        &:hover,\n        &:active,\n        &:focus {\n            color: $color4;\n        } // &:hover,&:active,&:focus\n    } // .logo\n} // .site-header\n","// Media Query Min Width.\n// @param $screen-size Min device width.\n@mixin bp-min($screen-size) {\n  @media (min-width: $screen-size) {\n    @content;\n  }\n}\n\n// Media Query Max Width.\n// @param $screen-size Max device width.\n@mixin bp-max($screen-size) {\n  @media (max-width: $screen-size) {\n    @content;\n  }\n}\n\n// Media Query Min/Max\n// @param $min Min device width.\n// @param $max Max device width.\n@mixin bp-min-max($min, $max) {\n  @media (min-width: $min) and (max-width: $max) {\n    @content;\n  }\n}\n\n// Desktop breakpoint\n// min-width: 767px\n@mixin bp-desktop {\n    @include bp-min(767px) {\n        @content;\n    }\n}\n","// ===============================\n// Navigation\n// ===============================\n.site-navigation-menu {\n    @include clearfix;\n    padding: 0;\n    margin: 0;\n    list-style: none;\n    float: right;\n\n    & > li {\n        margin-right: 25px;\n        float: left;\n\n        &:last-child {\n            margin-right: 0;\n        } // &:last-child\n    } // & > li\n\n    a {\n        text-decoration: none;\n    } // a\n\n    .active > a {\n        color: $color5;\n    } // .active > a\n} // .site-navigation-menu\n","// ===============================\n// Press Video\n// ===============================\n.press-bg-video {\n    position: fixed;\n    width: 100%;\n    height: auto;\n    left: 0;\n    top: 0;\n    background-color: $color3;\n    filter: blur(2px);\n    min-width: 100%;\n    min-height: 100%;\n} // .press-bg-video\n\n.video-hero {\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    top: 0;\n    right:0;\n    bottom: 0;\n    left: 0;\n    background-color: rgba($color3,.7);\n    color: $color2;\n    text-align: center;\n\n    .btn {\n        min-width: 120px;\n        max-width: 100%;\n        margin: 0 10px 20px;\n    } // .btn\n} // .video-hero\n\n// ==================================\n// Type Animation\n// ==================================\n.type-prefix {\n    display: inline;\n} // .type-prefix\n\n.type {\n    animation: type 1s steps(21), blink .5s step-end infinite alternate;\n    white-space: nowrap;\n    overflow: hidden;\n    border-right: 3px solid;\n    font-family: monospace;\n    display: inline-block;\n    line-height: 12px;\n} // .type\n\n@keyframes type {\n  from {\n    width: 0;\n  } // from\n} // @keyframes type\n\n@keyframes blink {\n  50% {\n    border-color: transparent;\n  } // 50%\n} // @keyframes blink\n\n","// ===============================\n// Content\n// ===============================\n.content {\n    margin-bottom: 25px;\n\n    @include bp-desktop {\n        margin-bottom: 40px;\n    } // @include bp-desktop\n} // .content\n\n.content-wrap {\n    @include span-columns(8);\n    @include shift(2);\n} // .content-wrap\n\n// ===============================\n// Links\n// ===============================\n.page-header {\n    text-align: center;\n    text-transform: uppercase;\n    margin-bottom: 25px;\n\n    @include bp-desktop {\n        margin-bottom: 40px;\n    } // @include bp-desktop\n} // .page-header\n\n// ===============================\n// Links\n// ===============================\na {\n    color: $color4;\n    transition: color 250ms ease-out;\n\n    &:hover,\n    &:active,\n    &:focus {\n        color: $color3;\n    } // &:hover,&:active,&:focus\n} // a\n\n// ===============================\n// Lists\n// ===============================\nul,\nol {\n    li {\n        margin-bottom: 5px;\n    } // li\n\n    ul,\n    ol {\n        margin-bottom: 10px;\n    } // ul,ol\n} // ul,ol\n\n// ===============================\n// Blockquote\n// ===============================\nblockquote {\n    margin-left: 0;\n    padding: 10px 0 10px 15px;\n    border-left: 5px solid $color3;\n\n    @include bp-desktop {\n        padding-left: 25px;\n    } // @include bp-desktop\n\n    p {\n        margin: 0;\n    } // p\n} // blockquote\n\n// ===============================\n// Headers\n// ===============================\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    margin: 0 0 15px;\n} // h1,h2,h3,h4,h5,h6\n\n// ===============================\n// Code\n// ===============================\ncode {\n    color: $color5;\n    background-color: $color3;\n    padding: 0 5px;\n    border-radius: 3px;\n    border: 1px solid lighten($color3, 10%);\n    display: inline-block;\n}\n\n// ===============================\n// General Spacing\n// ===============================\np,\nblockquote,\npre,\nul,\nol {\n    margin: 0 0 15px;\n\n    @include bp-desktop {\n        margin-bottom: 25px;\n    } // @include bp-desktop\n}\n","@charset \"UTF-8\";\n\n/// Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.\n///\n/// @param {List} $span\n///   A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional).\n///\n///   If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid.\n///\n///   The values can be separated with any string such as `of`, `/`, etc.\n///\n///   `$columns` also accepts decimals for when it's necessary to break out of the standard grid. E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n///\n/// @param {String} $display [block]\n///   Sets the display property of the element. By default it sets the display property of the element to `block`.\n///\n///   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n///\n///   If passed `table`, it sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.\n///\n/// @example scss - Usage\n///   .element {\n///     @include span-columns(6);\n///\n///    .nested-element {\n///      @include span-columns(2 of 6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///   .element {\n///     display: block;\n///     float: left;\n///     margin-right: 2.35765%;\n///     width: 48.82117%;\n///   }\n///\n///   .element:last-child {\n///     margin-right: 0;\n///   }\n///\n///   .element .nested-element {\n///     display: block;\n///     float: left;\n///     margin-right: 4.82916%;\n///     width: 30.11389%;\n///   }\n///\n///   .element .nested-element:last-child {\n///     margin-right: 0;\n///   }\n\n@mixin span-columns($span: $columns of $container-columns, $display: block) {\n  $columns: nth($span, 1);\n  $container-columns: container-span($span);\n\n  $parent-columns: get-parent-columns($container-columns) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  $display-table: is-display-table($container-display-table, $display);\n\n  @if $display-table  {\n    display: table-cell;\n    width: percentage($columns / $container-columns);\n  } @else {\n    float: #{$opposite-direction};\n\n    @if $display != no-display {\n      display: block;\n    }\n\n    @if $display == collapse {\n      @include -neat-warn(\"The 'collapse' argument will be deprecated. Use 'block-collapse' instead.\");\n    }\n\n    @if $display == collapse or $display == block-collapse {\n      width: flex-grid($columns, $container-columns) + flex-gutter($container-columns);\n\n      &:last-child {\n        width: flex-grid($columns, $container-columns);\n      }\n\n    } @else {\n      margin-#{$direction}: flex-gutter($container-columns);\n      width: flex-grid($columns, $container-columns);\n\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n  }\n}\n","$parent-columns: $grid-columns !default;\n$fg-column: $column;\n$fg-gutter: $gutter;\n$fg-max-columns: $grid-columns;\n$container-display-table: false !default;\n$layout-direction: LTR !default;\n\n@function flex-grid($columns, $container-columns: $fg-max-columns) {\n  $width: flex-width($columns);\n  $container-width: flex-width($container-columns);\n  @return percentage($width / $container-width);\n}\n\n@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {\n  $container-width: flex-width($container-columns);\n  @return percentage($gutter / $container-width);\n}\n\n@function flex-width($n, $column-width: $fg-column, $gutter-width: $fg-gutter) {\n  @return $n * $column-width + ($n - 1) * $gutter-width;\n}\n\n@function get-parent-columns($columns) {\n  @if $columns != $grid-columns {\n    $parent-columns: $columns !global;\n  } @else {\n    $parent-columns: $grid-columns !global;\n  }\n\n  @return $parent-columns;\n}\n\n@function is-display-table($container-is-display-table, $display) {\n  @return $container-is-display-table == true or $display == table;\n}\n","@charset \"UTF-8\";\n\n/// Translates an element horizontally by a number of columns. Positive arguments shift the element to the active layout direction, while negative ones shift it to the opposite direction.\n///\n/// @param {Number (unitless)} $n-columns [1]\n///   Number of columns by which the element shifts.\n///\n/// @example scss - Usage\n///   .element {\n///     @include shift(-3);\n///   }\n///\n/// @example css - CSS output\n///   .element {\n///     margin-left: -25.58941%;\n///   }\n\n@mixin shift($n-columns: 1) {\n  @include shift-in-context($n-columns);\n}\n\n/// Translates an element horizontally by a number of columns, in a specific nesting context.\n///\n/// @param {List} $shift\n///   A list containing the number of columns to shift (`$columns`) and the number of columns of the parent element (`$container-columns`).\n///\n///   The two values can be separated with any string such as `of`, `/`, etc.\n///\n/// @example scss - Usage\n///   .element {\n///     @include shift(-3 of 6);\n///   }\n///\n/// @example css - CSS output\n///   .element {\n///     margin-left: -52.41458%;\n///   }\n\n@mixin shift-in-context($shift: $columns of $container-columns) {\n  $n-columns: nth($shift, 1);\n  $parent-columns: container-shift($shift) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  margin-#{$opposite-direction}: $n-columns * flex-grid(1, $parent-columns) + $n-columns * flex-gutter($parent-columns);\n\n  // Reset nesting context\n  $parent-columns: $grid-columns !global;\n}\n","// ===============================\n// footer\n// ===============================\n.site-footer {\n\tbackground-color: $color3;\n\tcolor: $color2;\n\ttext-align: center;\n\tpadding: 10px 0;\n\tline-height: 1em;\n\twidth: 100%;\n    position: absolute;\n    bottom: 0;\n\n\t.home & {\n\t\tbackground-color: transparent;\n\t} // .home &\n\n    a {\n        color: $color2;\n        text-decoration: none;\n    } // a\n} // .site-footer\n","// =============================\n// Github Buttons\n// =============================\n.github-buttons {\n    list-style: none;\n    padding: 0;\n    display: block;\n    margin: 0;\n    padding-top: 15px;\n\n    li {\n        display: inline-block;\n        margin-bottom: 0;\n    } // li\n} // .github-buttons\n"]}